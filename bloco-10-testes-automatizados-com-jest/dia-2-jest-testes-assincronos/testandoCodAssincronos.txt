Testando c√≥digos ass√≠ncronos

√â comum encontrarmos em JavaScript linhas de c√≥digo que possuem comportamento ass√≠ncrono. Voc√™ j√° conhece tr√™s casos em que comportamentos ass√≠ncronos acontecem: callbacks , promises e async/await . Para que possamos testar estes casos, o Jest nos fornece algumas solu√ß√µes com objetivo de que nossos testes saibam o momento em que a fun√ß√£o a ser testada foi conclu√≠da, e a informa√ß√£o necess√°ria foi retornada. Isto evita que falsos positivos aconte√ßam e garante segura√ßa para a aplica√ß√£o. Vamos analisar cada caso separadamente abaixo:

Callbacks: para testar callbacks utilizamos a fun√ß√£o done . Ela √© chamada para sinalizar ao Jest que o teste dever√° aguardar o retorno da fun√ß√£o callback para que a valida√ß√£o aconte√ßa.

Promises: quando testamos promises devemos retorn√°-la dentro do teste. Lembre-se de utilizar then quando o retorno for um resolve e catch quando o retorno for um reject .

Async/Await: para testar fun√ß√µes com async e await devemos utilizar a palavra chave async na fun√ß√£o passada para teste e await onde esperamos algum retorno ass√≠ncrono. Lembre-se que o async/await √© apenas uma alternativa de sintaxe mais simples para testar promises .

A seguir voc√™ conhecer√° de forma detalhada todos os conceitos apresentados acima. N√£o se preocupe, existem exemplos e exerc√≠cios para que voc√™ possa colocar a teoria em pr√°tica e consolidar o aprendizado! üòâ
