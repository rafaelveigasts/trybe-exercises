O que vamos aprender?
VocÃª jÃ¡ aprendeu como instalar, configurar e utilizar os principais matchers do Jest , certo?
Agora vocÃª irÃ¡ aprender como testar cÃ³digos assÃ­ncronos, como reaproveitar configuraÃ§Ãµes entre testes e como separÃ¡-las por escopo.

VocÃª serÃ¡ capaz de:
Escrever testes para cÃ³digos assÃ­ncronos com diferentes padrÃµes;
Reaproveitar configuraÃ§Ãµes para diversos testes atravÃ©s do uso de beforeEach e afterEach ;
Dividir seus testes e suas respectivas configuraÃ§Ãµes em grupos separados por escopos atravÃ©s do uso de describe ;

Por que isso Ã© importante?
CÃ³digos assÃ­ncronos sÃ£o comuns em JavaScript , e vocÃª certamente vai precisar escrevÃª-los com frequÃªncia, e consequentemente testÃ¡-los. Por exemplo, quando vocÃª faz uma chamada a uma API para buscar dados, vocÃª estÃ¡ fazendo uma requisiÃ§Ã£o assÃ­ncrona.
Repetir cÃ³digo Ã© ruim, pois nÃ£o sÃ³ vocÃª estÃ¡ escrevendo mais do que precisa, mas tambÃ©m estÃ¡ correndo o risco de cometer um erro e replicÃ¡-lo em diferentes pontos, tornando sua correÃ§Ã£o difÃ­cil. AlÃ©m disso, nÃ£o Ã© fÃ¡cil replicar o cÃ³digo em sua exatidÃ£o, de forma que vocÃª, possivelmente, irÃ¡ deixar alguma coisa para trÃ¡s (dando mais margens pra erros). Com as configuraÃ§Ãµes dos testes, isso nÃ£o Ã© diferente â€” vocÃª nÃ£o quer ter que replicÃ¡-las em cada teste que escrever.

ConteÃºdos
Em seguida comeÃ§a o conteÃºdo de testes em cÃ³digos assÃ­ncronos. Ã‰ necessÃ¡rio atenÃ§Ã£o especial neste conteÃºdo, pois a habilidade de criar testes (e cÃ³digo testÃ¡vel) Ã© algo extremamente apreciado no mercado. No entanto, esse nÃ£o Ã© o Ãºnico motivo para vocÃª focar bastante nesse assunto, a outra razÃ£o Ã© que a Ã¡rea de testes Ã© um dos planetas dentro do universo de T.I (existe um cargo apenas para a funÃ§Ã£o de criar testes, conhecida por Quality Assurance ou QA) e essa primeira impressÃ£o pode parecer confusa, mas Ã© menos complexo do que parece. Lembre-se que estamos aqui para te apoiar e acreditamos no seu potencial! ğŸ’ªğŸ’¯