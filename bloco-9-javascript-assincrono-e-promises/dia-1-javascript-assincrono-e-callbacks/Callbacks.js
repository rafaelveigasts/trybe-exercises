/*
Callbacks

Agora que o conceito de assincronicidade est√° mais claro, √© hora de dar luz a callbacks !
De forma resumida, callback √© uma fun√ß√£o passada como par√¢metro para outra fun√ß√£o. Sem perceber voc√™ viu um exemplo de fun√ß√£o callback quando chamamos a fun√ß√£o setTimeout . Esta fun√ß√£o recebe dois par√¢metros, o primeiro √© a fun√ß√£o callback que passamos atrav√©s de uma arrow function , e o segundo √© o tempo que o interpretador ir√° esperar para executar a fun√ß√£o.
Agora veremos um exemplo pr√°tico de como podemos utilizar de fun√ß√µes callback . Copie e analise com calma cada trecho da implementa√ß√£o do c√≥digo, se necess√°rio volte na explica√ß√£o para que a implementa√ß√£o seja bem compreendida!

const myExpenses = [
  {
    gym: 99,
  },
  {
    ifood: 200,
  },
  {
    phone: 60,
  },
  {
    internet: 100,
  },
];

const myIncome = 1000;

Neste primeiro trecho de c√≥digo temos duas declara√ß√µes de vari√°veis. A primeira delas myExpenses , √© um array de objetos que representa os gastos de uma pessoa no m√™s. A segunda, myIncome , representa o quanto esta pessoa recebeu neste mesmo m√™s.

Nosso pr√≥ximo passo ser√° implementar uma fun√ß√£o que trate estas informa√ß√µes para que tenhamos como resultado um balan√ßo de entradas e sa√≠das do m√™s.

const monthlyBudget = (myIncome, myExpenses, callback) => {

  const totalExpenses = callback(myExpenses);
  const totalAfterExpenses = myIncome - totalExpenses;

  console.log(`Balan√ßo do m√™s:
    Recebido: R$${myIncome},00
    Gasto: R$${totalExpenses},00
    Saldo: R$${totalAfterExpenses},00 `);
};

Neste trecho da implementa√ß√£o podemos notar que foi adicionada uma fun√ß√£o monthlyBudget que recebe tr√™s par√¢metros, myIncome , myExpenses , e callback . Acredito que voc√™ deve estar pensando, "O que este par√¢metro callback est√° fazendo nesta fun√ß√£o?".

Como vimos anteriormente, callback √© basicamente uma fun√ß√£o passada por par√¢metro para outra fun√ß√£o. Neste exemplo o par√¢metro callback receber√° uma fun√ß√£o que retornar√° o quanto gastamos no m√™s, ou seja, nossa fun√ß√£o callback ir√° realizar a l√≥gica necess√°ria para somar todos os gastos contidos no array de objetos myExpenses , e retornar√° este valor para a constante totalExpenses .

const handleExpenses = myExpenses => {
  const eachValue = myExpenses.map((item) => Object.values(item)[0]);
  const totalExpense = eachValue.reduce((acc, curr) => acc + curr , 0);
  return totalExpense;
};

monthlyBudget(myIncome, myExpenses, handleExpenses);

Por fim podemos observar a implementa√ß√£o da nossa fun√ß√£o callback representada pela fun√ß√£o handleExpenses . Esta fun√ß√£o est√° tratando as informa√ß√µes contidas no array de objetos myExpenses e retornando o valor total de gastos.

Em s√≠ntese o que fizemos foi:

1 - Criamos vari√°veis que representam o quanto recebemos no m√™s e o quanto gastamos no m√™s.
2 - Implementamos a fun√ß√£o monthlyBudget que recebe tr√™s par√¢metros, nossos gastos, nossa renda e a fun√ß√£o callback .
3 - Realizamos a implementa√ß√£o da fun√ß√£o callback representada por handleExpenses que recebe nossos gastos mensais e retorna um valor de gastos total.
4 - Adicionamos handleExpenses na chamada da fun√ß√£o monthlyBudget e como resultado temos o balan√ßo mensal.

const myExpenses = [
  {
    gym: 99,
  },
  {
    ifood: 200,
  },
  {
    phone: 60,
  },
  {
    internet: 100,
  },
];

const myIncome = 1000;

const monthlyBudget = (myIncome, myExpenses, callback) => {
  const totalExpenses = callback(myExpenses);
  const totalAfterExpenses = myIncome - totalExpenses;

  console.log(`Balan√ßo do m√™s:
    Recebido: R$${myIncome},00
    Gasto: R$${totalExpenses},00
    Saldo: R$${totalAfterExpenses},00 `);
};

const handleExpenses = myExpenses => {
  const eachValue = myExpenses.map((item => Object.values(item)));
  const totalExpense = eachValue.reduce((acc, curr) => acc += curr[0] , 0);
  return totalExpense;
};

monthlyBudget(myIncome, myExpenses, handleExpenses);

Balan√ßo do m√™s:
    Recebido: R$1000,00
    Gasto: R$459,00
    Saldo: R$541,00

Reparou que voc√™ j√° estava usando callbacks desde a semana de JavaScript , com eventListeners , e at√© a semana passada, com filter , map e reduce ? A fun√ß√£o que voc√™ passa como par√¢metro para cada uma delas √© exemplo de fun√ß√£o callback . üòâ
Al√©m disso, lembra-se do exemplo da pizza mencionado no Por que isso √© importante ? O que voc√™ faz quando o pedido da pizza chega, que nesse caso √© jantar, corresponde a um callback .
Antes de seguir para os exerc√≠cios de fixa√ß√£o propostos abaixo, veja o v√≠deo a seguir para garantir o entendimento sobre callbacks :

Para fixar

Agora, fa√ßa estes exerc√≠cios de fixa√ß√£o:

1 - No c√≥digo abaixo voc√™ tem a fun√ß√£o getUser , que retorna uma pessoa qualquer. Complete a fun√ß√£o getUser de forma que ela receba uma outra fun√ß√£o como par√¢metro para que possa realizar as opera√ß√µes abaixo sobre a pessoa retornada.

const assert = require('assert');

const userFullName = ({ firstName, lastName }) => `Hello! My name is ${firstName} ${lastName}`;
const userNationality = ({ firstName, nationality }) => `${firstName} is ${nationality}`;

const getUser = callback => {
  const userToReturn = {
    firstName: "Ivan",
    lastName: "Ivanovich",
    nationality: "Russian"
  };
   return callback(userToReturn);
};
getUser √© a callback j√° tem que colocar um return se n√£o da undefined
atentar na chamada da fun√ß√£o aqui em baixo nos par√¢metros

assert.strictEqual(getUser(userFullName), "Hello! My name is Ivan Ivanovich"); // complete a chamada da fun√ß√£o de getUser
assert.strictEqual(getUser(userNationality), "Ivan is Russian"); // complete a chamada da fun√ß√£o de getUser



2 - No c√≥digo abaixo voc√™ tem a fun√ß√£o getUser modificada, que agora funciona de modo ass√≠ncrono e imprime dados de uma pessoa qualquer depois de um certo tempo. Complete a fun√ß√£o getUser de forma que ela receba um callback para que possa realizar as opera√ß√µes abaixo sobre a pessoa.

*/

const userFullName = ({ firstName, lastName }) => `Hello! My name is ${firstName} ${lastName}`;
const userNationality = ({ firstName, nationality }) => `${firstName} is ${nationality}`;

const delay = (maxMilliseconds = 5000) => Math.floor(Math.random() * maxMilliseconds);

const getUser = callback => {
  setTimeout(() => {
    const user = {
      firstName: "Ivan",
      lastName: "Ivanovich",
      nationality: "Russian",
    };
    console.log(callback(user));
  },delay());
};

getUser(userFullName); // deve imprimir "Hello! My name is Ivan Ivanovich" depois de um certo tempo
getUser(userNationality); // deve imprimir "Ivan is Russian" depois de um certo tempo

// Obs: note e averigue o comportamento ass√≠ncrono da fun√ß√£o getUser ao chamar getUser(userFullName) seguido de getUser(userNationality) . Tem hora que √© impresso antes no console o nome da pessoa, e tem hora que √© impressa antes a nacionalidade da pessoa!

