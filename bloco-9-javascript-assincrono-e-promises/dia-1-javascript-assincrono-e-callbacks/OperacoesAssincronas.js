/*
Opera√ß√µes ass√≠ncronas
Opera√ß√µes em JavaScript s√£o tradicionalmente s√≠ncronas, ou seja, para que uma cadeia de opera√ß√µes seja realizada, √© necess√°rio que uma opera√ß√£o termine para que outra comece. Em uma linha de produ√ß√£o de autom√≥veis por exemplo, v√°rias etapas de produ√ß√£o s√£o codependentes. Podemos relacionar estas etapas de produ√ß√£o √†s opera√ß√µes s√≠ncronas em JavaScript. Observe o exemplo abaixo para que esta analogia fique mais clara:

console.log('1 - Receber roda');
console.log('2 - Encaixar parafusos');
console.log('3 - Fixar roda no carro');

Note que existe uma ordem espec√≠fica de etapas que n√£o pode ser quebrada pois uma afeta diretamente a outra. Sem roda, n√£o adianta encaixar parafusos, sem encaixar parafusos, fixar a roda n√£o √© poss√≠vel.

Agora imagine que o nosso estoque de parafusos est√° chegando ao fim e √© necess√°rio que fa√ßamos uma reposi√ß√£o para que a linha de produ√ß√£o n√£o pare. No entanto, nossa opera√ß√£o n√£o cobre este tipo situa√ß√£o e nossa linha de produ√ß√£o para enquanto uma pessoa funcion√°ria ir√° comprar os parafusos e repor o estoque.

console.log('1 - Comprar parafusos');
console.log('2 - Adicionar ao estoque');
console.log('3 - Receber roda');
console.log('4 - Encaixar parafusos');
console.log('5 - Fixar roda no carro');

Observe que estamos trabalhando de forma ineficiente e adicionando etapas desnecess√°rias √† nossa produ√ß√£o pois se tivermos parafusos suficientes em estoque, n√£o precisamos parar a montagem para que mais parafusos sejam comprados e repostos. Assim como na nossa linha de produ√ß√£o, existem opera√ß√µes que n√£o possuem esta codepend√™ncia em JavaScript, e com objetivo de cobrir justamente este tipo de situa√ß√£o surgem as opera√ß√µes ass√≠ncronas .
Rode em seu editor o c√≥digo abaixo e veja como nossa linha de produ√ß√£o j√° n√£o depende mais das etapas de compra de parafusos e de reposi√ß√£o do estoque.
N√£o se preocupe com o c√≥digo em si, falaremos da fun√ß√£o setTimeout logo mais! üòâ

setTimeout(() => {
  console.log('Comprar parafusos') // Comprar parafusos
  console.log('Adicionar ao estoque') // Adicionar ao estoque
}, 2000);

console.log('1 - Receber roda'); // 1 - Receber roda
console.log('2 - Encaixar parafusos'); // 2 - Encaixar parafusos
console.log('3 - Fixar roda no carro'); // 3 - Fixar roda no carro

Note que console.log('Comprar parafusos') e console.log('Adicionar ao estoque') foram declarados antes das etapas 1 , 2 e 3 , mesmo assim o retorno das chamadas s√≥ ocorre ao final. Isto acontece pois utilizamos a fun√ß√£o setTimeout . √â muito comum que esta fun√ß√£o seja utilizada para simular comportamentos ass√≠ncronos. Na pr√°tica vivenciaremos situa√ß√µes em que nossa aplica√ß√£o depende de uma informa√ß√£o externa, como por exemplo, solicitar uma informa√ß√£o a um banco de dados. √â a√≠ que o conceito de assincronicidade entra a nosso favor para que nossa aplica√ß√£o n√£o perca efici√™ncia.

Agora, vamos ver um pouco da pr√°tica realizando este exerc√≠cio de fixa√ß√£o. Copie o c√≥digo para ser executado na sua m√°quina:

const assert = require('assert');

const pushNumber = (list, number) => list.push(number);

let numbers = [];

pushNumber(numbers, 1);
pushNumber(numbers, 2);
pushNumber(numbers, 3);

assert.deepStrictEqual(numbers, [1, 2, 3]);

Veja abaixo:

const assert = require('assert');

const pushNumber = (list, number) => list.push(number);

let numbers = [];

setTimeout(() => pushNumber(numbers, 1), 3000);
pushNumber(numbers, 2);
pushNumber(numbers, 3);

assert.deepStrictEqual(numbers, [1, 2, 3]); // essa valida√ß√£o falha

Por que a valida√ß√£o referente ao primeiro c√≥digo funciona, e a referente ao segundo n√£o? O teste espera receber o array [1, 2, 3] , mas apenas recebe o [2, 3] . Isso ocorre por causa da fun√ß√£o setTimeout . Ela √© uma fun√ß√£o ass√≠ncrona, que espera alguns milissegundos para executar a fun√ß√£o passada a ela como par√¢metro. No c√≥digo acima, ela espera 3000 milissegundos (3 segundos) para executar o pushNumber(numbers, 1) .
Para passar no teste, √© necess√°rio testar o numbers ap√≥s 3000 milissegundos:

const assert = require('assert');

const pushNumber = (list, number) => {
  list.push(number);
  console.log(list);
};

let numbers = [];

setTimeout(() => pushNumber(numbers, 1), 3000);
pushNumber(numbers, 2);
pushNumber(numbers, 3);

setTimeout(() => assert.deepStrictEqual(numbers, [2, 3, 1]), 3000);

Observe que, al√©m de adicionar o setTimeout , o array [1, 2, 3] foi modificado para [2, 3, 1] . Isso se d√°, pois, como a fun√ß√£o √© ass√≠ncrona, o c√≥digo continua rodando, mesmo que ela ainda n√£o tenha terminado de executar. Ou seja, o array recebe primeiro o 2 , depois o 3 , e ap√≥s os 3 segundos do setTimeout , ele recebe o 1 .
Para saber mais a respeito de setTimeout , acesse este link. https://www.w3schools.com/jsref/met_win_settimeout.asp

*/